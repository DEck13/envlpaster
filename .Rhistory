M2.renew <- P %*% t(modmat.renew[,index])
modmat.env.renew <- t(rbind(M1.renew,M2.renew))
data.renew <- asterdata(newdata, vars = vars, pred = pred,
group = rep(0, length(vars)), code = code,
families = families)
origin.renew <- model$origin[1:npop,]
offset.renew <- as.vector(origin.renew)
# fit the aster model using different methods
check_error = function(class, modmat_status=modmat.model) {
if(class == "try-error"){
class <- class(try(aout4star2 <- aster(xstar2, root, pred,
fam, modmat_status, parm = beta,
method = "nlm"), silent = TRUE))[1]
}
if(class == "try-error"){
class <- class(try( aout4star2 <- aster(xstar2, root,
pred, fam, modmat_status), silent = TRUE))[1]
}
if(class == "try-error"){
class<- class(try(aout4star2 <- aster(xstar2, root, pred,
fam, modmat_status, method = "nlm"), silent = TRUE))[1]
}
return(class)
}
method_check = function(method, tau, index, model, data, alpha) {
result = 0
if (method == "1d") {
barbaz <- envlpaster::selection(tau, index, model, data,
alpha = alpha, type = "mean-value", method = "1d")
if(criterion == "AIC") result <- barbaz$aic
if(criterion == "BIC") result <- barbaz$bic
if(criterion == "LRT") result <- barbaz$LRT
}
if(method == "eigen"){
fubar <- envlpaster::selection(tau, index, model, data,
alpha = alpha, type = "mean-value", method = "eigen")
if(criterion == "AIC") result <- fubar$aic
if(criterion == "BIC") result <- fubar$bic
if(criterion == "LRT") result <- fubar$LRT
}
return(result)
}
#list of vars and functs that need to be move into the parallel from global
cl <- makeCluster(corenum*2,type="SOCK")
registerDoSNOW(cl)
clusterExport(cl, c('check_error','method_check','theta.hat2',
'pred', 'fam', 'root','modmat.model','beta',
'modmat.mat','offset','amat.mat','vectors.list',
'MLE.tau.boot','est2','b2','offset.renew','index'),
envir=environment())
clusterEvalQ(cl,library("aster2","envlpaster","aster"))
resultlist<-foreach(k=1:nboot) %dopar%{
# fit the aster model to the resampled data obtained from
# the MLE of theta
xstar2 <-aster::raster(theta.hat2, pred, fam, root)
# fit the aster model to the resampled data obtained from
# the MLE of theta
class(b2) <- class(try(aout4star2 <-aster::aster(xstar2, root, pred,
fam, modmat.model, parm = beta), silent = TRUE))[1]
class(b2) <- check_error(class(b2))
# MLE of expected Darwinian fitness
tau.renew <- transformUnconditional(aout4star2$coef, data,
modmat = modmat.mat, from = "beta", to = "tau",
offset = offset)
phi.MLE.renew <- offset.renew + modmat.renew %*% aout4star2$coef
mu.MLE.renew <- transformSaturated(parm = phi.MLE.renew,
data.renew, from = "phi", to = "mu")
MLE.tau.boot <- tau.renew
est2 <- amat.mat %*% mu.MLE.renew #Dar.fit.MLE
# selection of the envelope eigenstructure
vectors.list = method_check(method, tau = tau.renew, index=index, model=aout4star2, data=data, alpha=alpha)
dim.1d=0
if (method=="1d") {
dim.1d=vectors.list
}
# get the bootstrapped envelope estimators
M <- matrix(modmat.model.int, nrow = n * nnode)
avar.star <- (aout4star2$fisher)[index,index]
beta.env.star <- aout4star2$coef
mu.star <- predict(aout4star2, parm.type = "mean.value",
model.type = "unconditional")
modelmatrix.star <- M
tau.env.star <- crossprod(modelmatrix.star, mu.star)
env.tau.boot <- tau.env.star
# envelope estimator of expected Darwinian fitness using
# eigenstructures
if(method == "eigen"){
G.star <- eigen(avar.star, symmetric = TRUE)$vec[,c(vectors)]
P.star <- tcrossprod(G.star)
P.list <- P.star
modelmatrix.star[, index] <- modelmatrix.star[, index] %*% P.star
M1.renew <- t(modmat.renew[,-index])
M2.renew <- P.star %*% t(modmat.renew[,index])
modmat.env.renew <- t(rbind(M1.renew,M2.renew))
}
# envelope estimator of expected Darwinian fitness using the
# 1d algorithm
if(method == "1d"){
if(vectors.list < length(index)){
up.env.star <- crossprod(M, mu.star)[index]
U.star <- up.env.star %o% up.env.star
G.star <- manifold1Dplus(avar.star, U = U.star, u = dim.1d)
P.star <- tcrossprod(G.star)
P.list[k] <- P.star
modelmatrix.star[, index] <- modelmatrix.star[, index] %*% P.star
beta.env.star <- transformUnconditional(parm = tau.env.star,
modelmatrix.star, data, from = "tau", to = "beta",
offset = offset)
modmat.env.renew <- modmat.renew
}
if(dim.1d == length(index)){
P.list <- diag(length(index))
env.tau.boot<- tau.renew
}
if(dim.1d == length(index)){
env.tau.boot<- tau.renew
}
}
# P.list
# env.tau.boot
beta.env.star <- transformUnconditional(parm = tau.env.star,
modelmatrix.star, data, from = "tau", to = "beta",
offset = offset)
modmat.env.renew[, index] <- modmat.env.renew[, index] %*% P.star
mu.env.renew <- transformUnconditional(parm = beta.env.star,
modmat.env.renew, data.renew, from = "beta", to = "mu",
offset = offset.renew)
# the stored expected Darwinian fitness estimates
est<- amat.mat %*% mu.env.renew
list(est,
est2,
MLE.tau.boot,
env.tau.boot,
P.list,
vectors.list)
}
stopCluster(cl)
env.boot.out=do.call(cbind, lapply(1:nboot, function(j){
unlist(resultlist[[j]][1])
}))
MLE.boot.out=do.call(cbind, lapply(1:nboot, function(j){
unlist(resultlist[[j]][2])
}))
MLE.tau.boot=do.call(cbind, lapply(1:nboot, function(j){
unlist(resultlist[[j]][3])
}))
env.tau.boot=do.call(cbind, lapply(1:nboot, function(j){
unlist(resultlist[[j]][4])
}))
P.list=do.call('c', lapply(1:nboot, function(j){
resultlist[[j]][5]
}))
vectors.list=do.call('c', lapply(1:nboot, function(j){
resultlist[[j]][6]
}))
out<-list( env.boot.out = env.boot.out, MLE.boot.out = MLE.boot.out, MLE.tau.boot = MLE.tau.boot,
env.tau.boot = env.tau.boot,
P.list = P.list,
vectors.list = vectors.list)
#secondboot
return(out)
}
use_r('fitness.boot')
library("devtools")
library("roxygen2")
library("testthat")
library("knitr")
use_r('fitness.boot')
check()
check()
check()
check()
check()
check()
devtools::load_all()
document()
check()
library(parallel)
devtools::load_all()
check()
document()
document()
document()
document()
check()
?DOSNOW
??doSNOW
devtools::load_all()
devtools::load_all()
document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
document()
document()
document()
document()
document()
document()
document()
devtools::load_all()
check
check()
check()
use_r("manifold1Dplus")
document()
use_r("scanner")
document()
use_r("secondboot")
document()
use_r("selection")
document()
document()
check()
check()
check()
check()
devtools::check()
devtools::check()
devtools::check()
library("devtools")
library("roxygen2")
library("testthat")
library("knitr")
document()
document()
document()
document()
document()
document()
document()
document()
check()
check()
check()
check()
check()
check()
check()
check()
document()
document()
document()
document()
document()
check()
document()
document()
document()
document()
document()
document()
check()
check()
document()
library("devtools")
library("roxygen2")
library("testthat")
library("knitr")
document_all()
document()
document()
check()
?asterdata
?transformconditional
library(aster2)
?transformConditional
document()
check()
document()
check()
check()
library("devtools")
library("roxygen2")
library("testthat")
library("knitr")
check()
check
check()
check()
library("devtools")
library("roxygen2")
library("testthat")
library("knitr")
document()
document()
document()
document()
document()
?fitness_boot
document()
document()
document()
#' @import aster
#' @import doSNOW
#' @import foreach
#' @import parallel
#' @import stats
#' @importFrom aster2 transformUnconditional transformSaturated asterdata
#' \loadmathjax{}
#' @noMd
#' @noRd
#' @importFrom mathjaxr preview_rd
mathjaxr::preview_rd("add.Rd", type = "pdf")
#' @examples \dontrun{# see Web-based Supplementary Materials for ``Enveloping the aster model.''}
#' @import aster
#' @import doSNOW
#' @import foreach
#' @import parallel
#' @import stats
#' @importFrom aster2 transformUnconditional transformSaturated asterdata
#' \loadmathjax{}
#' @noMd
#' @importFrom mathjaxr preview_rd
mathjaxr::preview_rd("fitness_boot.Rd", type = "pdf")
document()
document()
document()
document()
document()
document()
?fitness_boot
document()
document()
document()
document()
?fitness_boot
document()
document()
document()
?fitness_boot
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
#' \loadmathjax{}
#' @export
#' @examples \dontrun{# see Web-based Supplementary Materials for ``Enveloping the aster model.''}
#' @import aster
#' @import doSNOW
#' @import foreach
#' @import parallel
#' @import stats
#' @importFrom aster2 transformUnconditional transformSaturated asterdata
#' @import mathjaxr preview_rd
mathjaxr::preview_rd("fitness_boot.rd", type = "pdf")
#' \loadmathjax{}
#' @export
#' @examples \dontrun{# see Web-based Supplementary Materials for ``Enveloping the aster model.''}
#' @import aster
#' @import doSNOW
#' @import foreach
#' @import parallel
#' @import stats
#' @importFrom aster2 transformUnconditional transformSaturated asterdata
#' @import mathjaxr preview_rd
mathjaxr::preview_rd("fitness_boot.rd")
document()
document()
document()
getwd()
list.files()
document()
document()
document()
document()
?fitness_boot
document()
?fitness_boot
mathjaxr::preview_rd("fitness_boot.Rd", type = "pdf")
mathjaxr::preview_rd("fitness_boot", type = "pdf")
?fitness_boot
install.packages("rjags")
library("devtools")
library("roxygen2")
library("testthat")
library("knitr")
devtools::check(manual=TRUE)
document()
check()
?fitness_boot
document()
document()
?fitness_boot
document()
?fitness_boot
document()
?fitness_boot
document()
?fitness_boot
document()
?fitness_boot
document()
?fitness_boot
document()
?fitness_boot
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot")
?nthroot
knitr::opts_chunk$set(echo = TRUE)
period = function(a){
sqrt(a^3)
}
axis = function(p){
(p^2)^(1/3)
}
period(0.39)
period(0.39)
axis(0.62)
period(1.9)
axis(0.62)
period(1.9)
axis(0.62)
period(1.9)
axis(5.2)
period(0.39)
axis(0.62)
axis(1.9)
period(5.2)
axis(29)
period(19)
period(19)
axis(165)
period(84)
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("fitness_boot.Rd")
preview_rd("manifold1Dplus.Rd")
preview_rd("fitness_boot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("manifold1Dplus.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("manifold1Dplus.Rd")
preview_rd("secondboot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("secondboot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("secondboot.Rd")
devtools::document(roclets = c('rd', 'collate', 'namespace'))
preview_rd("secondboot.Rd")
devtools::load_all(".")
.rs.restartR()
?selection
library(envlpaster)
?selection
?fitness_boot
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::install()
.rs.restartR()
?secondboot
load("C:/Users/sicon/Desktop/major/research/github/envlpaster/data/Mguttatus.rda")
